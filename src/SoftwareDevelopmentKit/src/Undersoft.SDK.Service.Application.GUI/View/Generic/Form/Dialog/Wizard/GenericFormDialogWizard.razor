@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Proxies
@using Undersoft.SDK.Rubrics
@using Undersoft.SDK;

@inherits ViewItem<TModel>

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>

@implements IDialogContentComponent<IViewData<TModel>>
@implements IView


<CascadingValue Value="@Content">

    <GenericFormDialogWizardHeader TModel="TModel" />
    
    <GenericFormSet TValidator="TValidator" TModel="TModel" Content="@Content">
        <FluentWizard Id="generic-wizard">
            <Steps>
                @foreach (var _rubric in _rubrics)
                {
                    <GenericFormDialogWizardStep TValidator="TValidator" TModel="TModel" Data="@(GetStepData(_rubric))" />
                }                
            </Steps>
            <ButtonTemplate>
                <GenericFormDialogWizardButtons TModel="TModel" />
            </ButtonTemplate>
        </FluentWizard>
    </GenericFormSet>

</CascadingValue>

@code
{
    private IViewRubrics _rubrics => Content.Rubrics;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        Content.View = this;
        base.OnInitialized();
    }

    private IViewData GetStepData(IRubric rubric) 
    {
        return typeof(ViewData<>).MakeGenericType(rubric.RubricType).New<IViewData>(Model.Proxy[rubric.RubricId]);
    }
}
