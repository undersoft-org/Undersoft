@using Undersoft.SDK.Service.Access
@typeparam TModel where TModel : class, IOrigin, IInnerProxy, IAuthorization
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>

@implements IDialogContentComponent<IViewData<TModel>>
@implements IView
@inject IMessageService MessageService



<CascadingValue Value="@Content">

    <!-- Header -->
    <GenericFormPanelTabsHeader TModel="TModel" />

    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" VerticalGap="20">

        <FluentPersona Initials="_initials" Image="_image" ImageSize="150px" Style="height:auto;" />

        <!-- Body -->
        <div>
            <GenericFormPanelTabsBody TValidator="TValidator" TModel="TModel" Orientation="Orientation.Vertical" />
        </div>

    </FluentStack>
    <FluentSpacer />
    <!-- Footer -->
    <GenericFormPanelTabsFooter TModel="TModel" />

</CascadingValue>

@code
{
    [Inject]
    private IAuthorization _authorization { get; set; } = default!;

    private string _initials
    {
        get
        {
            string s = "";
            if (Content != null)
            {
                if (!string.IsNullOrEmpty(Content.Model.Credentials.FirstName))
                    s += Content.Model.Credentials.FirstName.First().ToString();
                if (!string.IsNullOrEmpty(Content.Model.Credentials.LastName))
                    s += Content.Model.Credentials.LastName.First().ToString();
            }
            if (string.IsNullOrEmpty(s))
                s = "?";
            return s;
        }
    }

    [Parameter]
    public IViewData<TModel> Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private string? _image = null;

    protected override void OnInitialized()
    {
        if (Content != null)
        {
            if (Content.Model.Credentials.Image != null && Content.Model.Credentials.ImageData != null)
            {
                _image = $"{Content.Model.Credentials.Image.Split(";")[0]};base64, {Convert.ToBase64String(Content.Model.Credentials.ImageData)}";
            }
        }
    }

    public void RenderView()
    {
        this.StateHasChanged();
    }

}