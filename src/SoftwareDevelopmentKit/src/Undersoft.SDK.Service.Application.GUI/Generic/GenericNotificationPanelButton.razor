@    using Undersoft.SDK.Service
@    using Undersoft.SDK.Service.Data.Event

@implements IDisposable
@inject IServicer _servicer
@inject IMessageService MessageService

@if (MessageService.Count(ViewSection.PANEL) > 0)
{
    <FluentCounterBadge Count="@MessageService.Count(ViewSection.PANEL)"
                        Max="9"
                        ShowOverflow="true"
                        BackgroundColor="@Color.Error"
                        Color="Color.Fill"
                        Appearance="Appearance.Accent"
                        ShowZero=true>
        <ChildContent>
            @NotificationIcon()
        </ChildContent>
    </FluentCounterBadge>
}
else
{
    @NotificationIcon()
}

@code
{

    private IViewPanel<Event> _panel = default!;

    protected override void OnInitialized()
    {
        MessageService.OnMessageItemsUpdated += UpdateCount;
        _panel = _servicer.Initialize<ViewPanel<GenericNotificationPanel<Event>, Event>>();
    }

    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }

    private RenderFragment NotificationIcon() => @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Fill" Title="Notification center" OnClick="OpenNotificationPanelAsync" />;

    private async Task OpenNotificationPanelAsync()
    {
        await _panel.Show((p) =>
           {
               p.Alignment = HorizontalAlignment.Right;
               p.Title = $"Notifications";
               p.PrimaryAction = null;
               p.SecondaryAction = null;
               p.ShowDismiss = true;
           });

        HandlePanel(_panel.Content);
    }

    private void HandlePanel(IViewData<Event>? result)
    {

    }

    public void Dispose()
    {
        MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

}