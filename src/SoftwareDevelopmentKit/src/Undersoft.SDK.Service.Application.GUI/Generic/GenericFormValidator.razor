@using FluentValidation;
@using FluentValidation.Results;
@using Microsoft.AspNetCore.Components.Forms;
@using Undersoft.SDK.Instant.Proxies;
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK.Invoking
@using Undersoft.SDK.Series
@using ValidationResult = FluentValidation.Results.ValidationResult;
@using Undersoft.SDK.Service.Application.GUI.View;

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>

@code
{
    [CascadingParameter]
    private EditContext FormContext { get; set; } = default!;

    [CascadingParameter]
    private IViewData<TModel> Content { get; set; } = default!;

    [Inject]
    private IValidator<IViewData<TModel>> Validator { get; set; } = default!;

    private ValidationMessageStore ValidationMessageStore = default!;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        EditContext previousEditContext = FormContext;

        await base.SetParametersAsync(parameters);

        Content.FormValidator = new Invoker(this.ValidateFormAsync);
        Content.FieldValidator = new Invoker(this.ValidateFieldAsync);

        if (FormContext != previousEditContext)
            EditContextChanged();
    }

    void EditContextChanged()
    {
        ValidationMessageStore = new ValidationMessageStore(FormContext);

        HookUpEditContextEvents();
    }

    private void HookUpEditContextEvents()
    {
        FormContext.OnFieldChanged += FieldChanged;
    }

    public async Task<bool> ValidateFormAsync()
    {
        ValidationMessageStore.Clear();
        Content.ViewRubrics.ForEach(r => r.Errors.Clear());

        var context = new ValidationContext<IViewData<TModel>>(Content);
        var result = await Validator.ValidateAsync(context);

        if (result.Errors.Any())
        {
            result.Errors.ForEach(e =>
               {
                   var rubric = Content.ViewRubrics[e.PropertyName.Replace("Model.", "")];
                   rubric.Errors.Clear();
                   if (rubric.Errors.TryAdd(e.ErrorMessage))
                       ValidationMessageStore.Add(rubric.FieldIdentifier, e.ErrorMessage);
               });
            FormContext.NotifyValidationStateChanged();
            return false;
        }

        FormContext.NotifyValidationStateChanged();
        return true;
    }

    public async Task<bool> ValidateFieldAsync(string propertyName)
    {      
        IViewRubric rubric = Content.ViewRubrics[propertyName];  

        ValidationMessageStore.Clear(rubric.FieldIdentifier);
        rubric.Errors.Clear();

        var context = new ValidationContext<IViewData<TModel>>(Content);
        var result = await Validator.ValidateAsync(context);
        var _result = new ValidationResult(result.Errors.Where(e => e.PropertyName.Contains(rubric.RubricName)));

        if (_result.Errors.Any())
        {
            _result.Errors.ForEach(e =>
            {
                if (rubric.Errors.TryAdd(e.ErrorMessage))
                    ValidationMessageStore.Add(rubric.FieldIdentifier, e.ErrorMessage);
            });
            FormContext.NotifyValidationStateChanged();
            return false;
        }
        FormContext.NotifyValidationStateChanged();
        return true;
    }

    async void FieldChanged(object? sender, FieldChangedEventArgs args)
    {
        ValidationMessageStore.Clear(args.FieldIdentifier);
        dynamic field = args.FieldIdentifier.Model;        
        IViewRubric rubric = field.Rubric;
        rubric.Errors.Clear();

        var context = new ValidationContext<IViewData<TModel>>(Content);
        var result = await Validator.ValidateAsync(context);        
        var _result = new ValidationResult(result.Errors.Where(e => e.PropertyName.Contains(rubric.RubricName)));

        if (_result.Errors.Any())
        {
            _result.Errors.ForEach(e =>
               {
                   if (rubric.Errors.TryAdd(e.ErrorMessage))
                       ValidationMessageStore.Add(args.FieldIdentifier, e.ErrorMessage);
               });
            rubric.Field.NotifyStateHasChanged();
        }                       
        FormContext.NotifyValidationStateChanged();
    }
}