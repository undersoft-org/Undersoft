@using System.ComponentModel.DataAnnotations
@using FluentValidation
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK
@using Undersoft.SDK.Invoking

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IGenericData<TModel>>

<div class="generics generic-form forms">
    <CascadingValue Value="@FormContext">
        <EditForm EditContext="@FormContext" FormName="generic_form">
            <GenericFormValidator TValidator="TValidator" TModel="TModel" />
                <CascadingValue Value="@Content">
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" VerticalGap="5">
                        @foreach (var _rubric in _rubrics)
                        {                    
                            <GenericField TModel="TModel" Rubric="@_rubric" />
                        }
                    </FluentStack>
                </CascadingValue>
        </EditForm>
    </CascadingValue>
</div>

@code {
    private IViewRubrics _rubrics => Content.ViewRubrics;
    private IProxy _proxy => Content.Model.Proxy;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
        FormContext.OnFieldChanged += FieldChanged;
    }

    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IGenericData<TModel> Content { get; set; } = default!;

    private void FieldChanged(object? sender, FieldChangedEventArgs args)
    {
        if (OnFieldChanged != null)
            OnFieldChanged(sender, args);
    }

    public event EventHandler<FieldChangedEventArgs>? OnFieldChanged;
}

