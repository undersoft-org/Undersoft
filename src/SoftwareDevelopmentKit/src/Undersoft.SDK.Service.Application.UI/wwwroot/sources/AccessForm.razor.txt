@page "/account/signin"
@inject IAccountAccess _service
@inject NavigationManager _navigation

@using Account = Undersoft.SSC.Service.Contracts.Account;
@using Undersoft.SDK.Invoking;
@using Undersoft.SDK.Service.Data.Client;
@using Undersoft.SSC.Service.Application;
@using Undersoft.SDK.Service.Application.Access;

<h1>Sign in</h1>

<EditForm Model="@Account" OnValidSubmit="@HandleValidSubmit" FormName="SignIn" novalidate>
    <DataAnnotationsValidator />
    <FluentValidationSummary />
    <FluentStack Orientation="Orientation.Vertical">        
        <div>
            <FluentTextField Name="accomodation" @bind-Value="starship.MaximumAccommodation"  Label="Maximum Accommodation" Required />
            <FluentValidationMessage For="@(() => starship.MaximumAccommodation)" />
        </div>
        <div>
            <FluentCheckbox Name="approved" @bind-Value="starship.IsValidatedDesign" Required Label="Engineering approval" />
            <FluentValidationMessage For="@(() => starship.IsValidatedDesign)" />
        </div>
        <div>
            <FluentDatePicker Name="production_date" Id="proddate" @bind-Value="starship.ProductionDate" Label="Production Date" Required />
            <FluentValidationMessage For="@(() => starship.ProductionDate)" />
        </div>
        <div>
            <FluentSwitch Name="teleporter" @bind-value="starship.HasTeleporter" Label="Teleporter" CheckedMessage="Fully operational" UncheckedMessage="Under maintenance"/>
            <FluentValidationMessage For="@(() => starship.HasTeleporter)" />
        </div>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
    </FluentStack>
</EditForm>

@code {

    private Account account = new Account();

    private async Task Access()
    {
        await _service.SignIn(account);

        _navigation.NavigateTo("");
    }
}
