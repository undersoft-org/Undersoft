@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@inject NavigationManager _navigation

@typeparam TModel where TModel : class, IOrigin, IInnerProxy

@implements IDialogContentComponent<IGenericData<TModel>>

<CascadingValue Value="@Content">
    <CascadingValue Value="@FormContext">

        <!-- Header -->
        <GenericEditDialogHeader TModel="TModel" />

        <!-- Body -->
        <GenericEditDialogBody TModel="TModel" />

    </CascadingValue>
</CascadingValue>

<!-- Footer -->
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentSpacer />
        <FluentButton OnClick="@OnSignIn" Appearance="Appearance.Lightweight">
            Sign in
        </FluentButton>
        <FluentButton Appearance="Appearance.Accent"
                      Disabled="@(!FormContext.Validate())"
                      OnClick="@SaveAsync">
            Sign up
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IGenericData<TModel> Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
    }

    private async Task OnSignIn(MouseEventArgs e)
    {
        Content.NextPath = "access/sign_in";

        await Dialog.CloseAsync(Content);
    }

    private async Task SaveAsync()
    {
        if (FormContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }
}
