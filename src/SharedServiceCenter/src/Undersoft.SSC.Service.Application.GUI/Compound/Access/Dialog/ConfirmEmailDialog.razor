@    using System.ComponentModel.DataAnnotations
@    using Undersoft.SDK.Instant.Proxies
@    using Undersoft.SDK.Instant.Rubrics
@    using Undersoft.SDK.Invoking
@    using Undersoft.SDK;
    using Undersoft.SDK.Service.Application.GUI.Models

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>

@implements IDialogContentComponent<IViewData<TModel>>
@implements IView

<CascadingValue Value="@Data">
    <CascadingValue Value="@FormContext">

        <!-- Header -->
        <GenericFormDialogHeader TModel="TModel" />

        <!-- Body -->
        <GenericFormDialogBody TValidator="TValidator" TModel="TModel" />

    </CascadingValue>
</CascadingValue>

<!-- Footer -->
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentButton OnClick="@SendAgain" Appearance="Appearance.Lightweight">
            Send again
        </FluentButton>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent"                
                  OnClick="@SaveAsync">
        Confirm
    </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IViewData<TModel> Data { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        Data.View = this;
        FormContext = new EditContext(Data);
    }

    private async Task SaveAsync()
    {
        if ((await Data.Validator.ValidateAsync()).IsValid)
        {
            await Dialog.CloseAsync(Data);
        }
    }

    private async Task SendAgain(MouseEventArgs e)
    {
        await Dialog.CancelAsync();
    }

    public void RenderView()
    {
        this.StateHasChanged();
    }
}
