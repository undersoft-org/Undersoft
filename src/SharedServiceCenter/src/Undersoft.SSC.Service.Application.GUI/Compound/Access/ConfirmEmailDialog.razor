@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IGenericData<TModel>>

@implements IDialogContentComponent<IGenericData<TModel>>

<CascadingValue Value="@Content">
    <CascadingValue Value="@FormContext">

        <!-- Header -->
        <GenericFormDialogHeader TModel="TModel" />

        <!-- Body -->
        <GenericFormDialogBody TValidator="TValidator" TModel="TModel" />

    </CascadingValue>
</CascadingValue>

<!-- Footer -->
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentButton OnClick="@SendAgain" Appearance="Appearance.Lightweight">
            Send again
        </FluentButton>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent"                
                  OnClick="@SaveAsync">
        Confirm
    </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IGenericData<TModel> Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (FormContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task SendAgain(MouseEventArgs e)
    {
        await Dialog.CancelAsync();
    }
}
