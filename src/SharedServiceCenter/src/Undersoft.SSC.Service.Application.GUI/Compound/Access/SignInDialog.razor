@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@inject NavigationManager _navigation

@typeparam TModel where TModel : class, IOrigin, IInnerProxy

@implements IDialogContentComponent<IGenericData<TModel>>

<CascadingValue Value="@Content">
    
    <!-- Header -->
    <GenericEditDialogHeader TModel="TModel" />

</CascadingValue>

<!-- Body -->
<FluentDialogBody>

    <!-- Form -->
    <GenericForm TModel="@TModel" Model="@Content" Context="@FormContext" />

    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <a>Some problem with credentials?</a>
        <FluentButton OnClick="@OnResetPassword" Appearance="Appearance.Lightweight">
            Reset password 
        </FluentButton>
    </FluentStack>

</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <a>Don't have an account?</a>
        <FluentButton OnClick="@OnSignUp" Appearance="Appearance.Lightweight">
            Sign up
        </FluentButton>
    </FluentStack>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!FormContext.Validate())"
                  OnClick="@SaveAsync">
        Sign in
    </FluentButton>
</FluentDialogFooter>

@code
{
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public IGenericData<TModel> Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
    }

    private async Task OnSignUp(MouseEventArgs e)
    {
        Content.NextPath = "access/sign_up";

        await Dialog.CloseAsync(Content);
    }

    private async Task OnResetPassword(MouseEventArgs e)
    {
        Content.NextPath = "access/reset_password";

        await Dialog.CloseAsync(Content);
    }

    private async Task SaveAsync()
    {
        if (FormContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }
}
