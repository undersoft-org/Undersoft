// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.SSC.Service.Infrastructure.Stores;

#nullable disable

namespace Undersoft.SSC.Service.Infrastructure.Stores.Migrations.Reports
{
    [DbContext(typeof(ReportStore))]
    [Migration("20240118190422_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ActivityIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Application>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ApplicationIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("DetailIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("MemberIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ResourceIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ScheduleIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ServiceIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("SettingIdentifiers", "Identifier");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivityAndActivity", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesAndResources", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Application>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ApplicationAndApplication", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ApplicationsAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ApplicationsAndMembers", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ApplicationsAndServices", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ApplicationsAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Detail, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("DetailAndDetail", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersAndActivities", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MemberAndMember", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersAndResources", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersAndSchedules", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourceAndResource", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesAndSchedules", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesAndActivities", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ScheduleAndSchedule", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesAndDetails", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesAndMembers", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServiceAndService", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesAndSettings", "Relation");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Setting, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("LeftEntityId", "RightEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("RelatedFromAndRelatedTo", "Relation");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Activities", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Application", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Applications", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Default", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Defaults", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Detail", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<JsonDocument>("Document")
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Details", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<int>("LocaleType")
                        .HasColumnType("integer");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long?>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Locations", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Locations.Endpoint", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<string[]>("Parameters")
                        .HasColumnType("text[]");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<string>("Return")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<string>("URI")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Endpoints", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Locations.Position", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Block")
                        .HasColumnType("integer");

                    b.Property<int>("Cluster")
                        .HasColumnType("integer");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<double?>("Latitue")
                        .HasColumnType("double precision");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.Property<int?>("Z")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Positions", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Members", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Resources", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Schedules", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long?>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Services", "Local");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Setting", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(9);

                    b.Property<long>("DefaultId")
                        .HasColumnType("bigint");

                    b.Property<JsonDocument>("Document")
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OriginId")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefaultId");

                    b.HasIndex("Index")
                        .IsUnique();

                    b.ToTable("Settings", "Local");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Application>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Activity, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Application>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Application, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Detail, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Member, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Resource, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Schedule, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Service>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Service, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Store.Relation.RelatedLink<Undersoft.SSC.Domain.Entities.Setting, Undersoft.SSC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .IsRequired();

                    b.HasOne("Undersoft.SSC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Activity", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Activities")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Application", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Applications")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Detail", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Details")
                        .HasForeignKey("DefaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Location", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Activity", "Activity")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.HasOne("Undersoft.SSC.Domain.Entities.Application", "Application")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.HasOne("Undersoft.SSC.Domain.Entities.Member", "Member")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.HasOne("Undersoft.SSC.Domain.Entities.Resource", "Resource")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.HasOne("Undersoft.SSC.Domain.Entities.Schedule", "Schedule")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.HasOne("Undersoft.SSC.Domain.Entities.Service", "Service")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.SSC.Domain.Entities.Location", "LocationId");

                    b.Navigation("Activity");

                    b.Navigation("Application");

                    b.Navigation("Member");

                    b.Navigation("Resource");

                    b.Navigation("Schedule");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Locations.Endpoint", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Location", "Location")
                        .WithMany("Endpoints")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Locations.Position", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Location", "Location")
                        .WithMany("Positions")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Member", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Members")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Resource", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Resources")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Schedules")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Service", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Services")
                        .HasForeignKey("DefaultId");

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Setting", b =>
                {
                    b.HasOne("Undersoft.SSC.Domain.Entities.Default", "Default")
                        .WithMany("Settings")
                        .HasForeignKey("DefaultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Default");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Application", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Default", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Applications");

                    b.Navigation("Details");

                    b.Navigation("Members");

                    b.Navigation("Resources");

                    b.Navigation("Schedules");

                    b.Navigation("Services");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Detail", b =>
                {
                    b.Navigation("Identifiers");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Location", b =>
                {
                    b.Navigation("Endpoints");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Member", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Service", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SSC.Domain.Entities.Setting", b =>
                {
                    b.Navigation("Identifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
