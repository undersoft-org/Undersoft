@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Updating
@using Undersoft.SDK.Instant.Rubrics.Attributes
@using Undersoft.SDK.Service;
@using Undersoft.SDK.Service.Application.Access;

@page "/account/signup"
@inject IAccountAccess _access
@inject NavigationManager _navigation
@inject IServicer _servicer


@code
{
    private AccessDialog<SignUpDialog<SignUpModel>, SignUpModel> _dialog = default!;

    protected override void OnInitialized()
    {
        _dialog = _servicer.Initialize<AccessDialog<SignUpDialog<SignUpModel>, SignUpModel>>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SigningUp("Sign up");
        }
    }

    private async Task SigningUp(string title)
    {
        while (true)
        {
            var model = new SignUpModel();
            var account = new Account();

            await _dialog.Show(model, title);

            if (_dialog.Data == null)
                break;

            model = _dialog.Data;
            model.PatchTo(account.Credentials);
            
            account.Credentials.UserName = 
                $"{model.FirstName} {model.LastName}";
            
            var result = await _access.SignUp(account);

            if (result.Credentials.Authorized)
            {
                if (result.Credentials.EmailConfirmed)
                {
                    if (result.Credentials.RegistrationCompleted)
                        _navigation.NavigateTo("");

                    _navigation.NavigateTo("/account/registration");
                }
                else
                    _navigation.NavigateTo("/account/confirmation");
            }
        }
    }

    public class SignUpModel : InnerProxy
    {
        [VisibleRubric]
        [DisplayRubric("First name")]
        public string FirstName { get; set; } = default!;

        [VisibleRubric]
        [DisplayRubric("Last name")]
        public string LastName { get; set; } = default!;

        [VisibleRubric]
        public string Email { get; set; } = default!;

        [VisibleRubric]
        public string Password { get; set; } = default!;

        [VisibleRubric]
        [DisplayRubric("Retype password")]
        public string RetypePassword { get; set; } = default!;
    }
 }
