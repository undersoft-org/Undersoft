@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Updating
@using Undersoft.SDK.Instant.Rubrics.Attributes
@using Undersoft.SDK.Service;
@using Undersoft.SDK.Service.Access;

@page "/access/sign_up"
@inject IAccountAccess _access
@inject NavigationManager _navigation
@inject IServicer _servicer

@code
{
    private IGenericDialog<Credentials> _dialog = default!;

    protected override void OnInitialized()
    {
        _dialog = _servicer.Initialize<AccessDialog<SignUpDialog<Credentials, AccessValidator>, Credentials>>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SigningUp("Sign up");
    }

    private async Task SigningUp(string title, string description = "")
    {
        var notes = new AuthorizationNotes();
        var data = new GenericData<Credentials>(new Credentials(), CommandMode.Create, title);
        data.SetVisible("FirstName", "LastName", "Email", "Password", "RetypePassword");
        data.Description = description;
        data.Height = "640px";

        while (true)
        {
            await _dialog.Show(data);

            var content = _dialog.Content;
            if (content != null)
            {
                if (content.HaveNext && content.NextPath != null)
                {
                    _navigation.NavigateTo(content.NextPath);
                    return;
                }
                content.Data.UserName = $"{content.Data.FirstName} {content.Data.LastName}";

                var result = await _access.SignUp(new Account() { Credentials = content.Data });

                if (result.Notes.Status != SigningStatus.Failure && result.Notes.Errors == null)
                {
                    _navigation.NavigateTo("access/confirm_email");
                    return;
                }
                data.PatchFrom(result.Notes);
            }
        }
    }
}
