@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@inject NavigationManager _navigation

@typeparam TModel where TModel : class, IOrigin, IInnerProxy

@implements IDialogContentComponent<TModel>

<!-- Header -->
<FluentDialogHeader>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.AppGeneric())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@if (Content != null)
{
    <!-- Body -->
    <FluentDialogBody>

        <!-- Auto Form -->
        <GenericForm TModel="@TModel" Model="@Content" Context="@FormContext" />

    </FluentDialogBody>
}
<!-- Footer -->
<FluentDialogFooter>      
    Already have an account?
    <FluentButton OnClick="@OnSignIn" Appearance="Appearance.Hypertext">
        Sign in
    </FluentButton>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!FormContext.Validate())"
                  OnClick="@SaveAsync">
        Sign up
    </FluentButton>
</FluentDialogFooter>

@code
 {    
    public EditContext FormContext { get; set; } = default!;

    [Parameter]
    public TModel Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        FormContext = new EditContext(Content);
    }

    private async Task OnSignIn()
    {
        await Dialog.CancelAsync();

        _navigation.NavigateTo("account/signin");
    }

    private async Task SaveAsync()
    {
        if (FormContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }
}
