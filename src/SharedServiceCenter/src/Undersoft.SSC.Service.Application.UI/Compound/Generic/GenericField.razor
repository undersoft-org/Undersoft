@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Instant.Proxies
@using Undersoft.SDK.Instant.Rubrics
@using Undersoft.SDK

@typeparam TModel where TModel : class, IOrigin, IInnerProxy

<div>
    @if (_type.IsPrimitive)
    {
        @if (_type.IsAssignableTo(typeof(long)))
        {
            <div>
                <FluentNumberField Name="@Name" @bind-Value="@Data" Label="@DisplayName" Required="@Required" />
            </div>
        }
        else if (_type.IsAssignableTo(typeof(DateTime)))
        {
            <div>
                <FluentDatePicker Name="@Name" @bind-Value="@TimeValue" Label="@DisplayName" Required="@Required" />
            </div>
        }
        else if (_type.IsAssignableTo(typeof(bool)))
        {
            <div>
                <FluentCheckbox Name="@Name" @bind-Value="@BoolValue" Label="@DisplayName" Required="@Required" />
            </div>
        }
        else
        {
            <div>
                <FluentTextField Name="@Name" @bind-Value="@TextValue" Label="@DisplayName" Required="@Required" />
            </div>
        }
        <div>
            <FluentValidationMessage For="@(() => Data)" />
        </div>
    }
    else if (_type == typeof(string) || _type.IsAssignableTo(typeof(IFormattable)))
    {
        <div>
            <FluentTextField Name="@Name" @bind-Value="@TextValue" Label="@DisplayName" TextFieldType="@textFieldType" InputMode="@inputMode" Required="@Required" />
            <FluentValidationMessage For="@(() => Data)" />
        </div>
    }
</div>

@code
{
    private Type _type = default!;

    private IProxy _proxy = default!;

    private int _id;

    protected override void OnInitialized()
    {
        _type = Rubric.RubricType;
        _proxy = Model.Proxy;
        _id = Rubric.RubricId;

        Name = Rubric.RubricName;
        if (Rubric.DisplayName != null)
            DisplayName = Rubric.DisplayName;
        else
            DisplayName = Rubric.RubricName;
        Required = Rubric.Required;

        inputMode = GetInputMode();
        textFieldType = GetTexType();
    }

    [CascadingParameter]
    public TModel Model { get; set; } = default!;

    [Parameter]
    public IRubric Rubric { get; set; } = default!;

    protected string Name { get; set; } = "";

    protected string? DisplayName { get; set; }

    protected bool Required { get; set; }

    protected InputMode inputMode { get; set; } = InputMode.None;

    protected TextFieldType textFieldType { get; set; } = TextFieldType.Text;

    protected object? Data
    {
        get { return _proxy[_id]; }
        set { _proxy[_id] = value; }
    }

    protected string? TextValue
    {
        get { return Data?.ToString(); }
        set { Data = value; }
    }

    protected DateTime? TimeValue
    {
        get { return (DateTime?)Data; }
        set { Data = value; }
    }

    protected bool BoolValue
    {
        get
        {
            if (Data != null)
                return (bool)Data;
            return false;
        }
        set
        {
            Data = value;
        }
    }

    private InputMode GetInputMode()
    {
        if (Name.ToLower().Contains("phone"))
            return InputMode.Telephone;
        if (Name.ToLower().Contains("search"))
            return InputMode.Search;
        if (Name.ToLower().Contains("url"))
            return InputMode.Url;
        if(_type.IsAssignableTo(typeof(decimal)))
            return InputMode.Decimal;
        return InputMode.Text;
    }

    private TextFieldType GetTexType()
    {
        if (Name.ToLower().Contains("passw"))
            return TextFieldType.Password;
        if (Name.ToLower().Contains("email"))
            return TextFieldType.Email;
        if (Name.ToLower().Contains("phone"))
            return TextFieldType.Tel;
        if (Name.ToLower().Contains("url"))
            return TextFieldType.Url;
        return TextFieldType.Text;        
    }

}
